generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String   @id
  createdAt   DateTime @default(now())
  comments    String
  painLevel   Int
  effortLevel Int
  date        DateTime
  routineId   String
  Routine     Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
}

model Address {
  id           String        @id
  street       String
  number       String
  city         String
  state        String
  zipCode      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime
  userId       String?       @unique
  User         User?         @relation(fields: [userId], references: [id])
  Professional Professional?
}

model Appointment {
  id                 String                @id
  startDate          DateTime
  status             AppointmentStatusEnum @default(scheduled)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now())
  professionalId     String
  patientId          String
  timeZone           Decimal               @default(0)
  endDateTime        String
  startDateTime      String
  User               User                  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Professional       Professional          @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  AppointmentComment AppointmentComment?
}

model AppointmentComment {
  id            String      @id
  createdAt     DateTime    @default(now())
  comment       String
  appointmentId String      @unique
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model Evolution {
  id                String       @id
  date              DateTime
  clinicalDiagnosis String
  physicalDiagnosis String
  evolution         String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime
  professionalId    String
  userId            String
  Professional      Professional @relation(fields: [professionalId], references: [id])
  User              User         @relation(fields: [userId], references: [id])
}

model Exercise {
  id              String               @id
  name            String
  description     String
  category        ExerciseCategoryEnum
  image           String?
  video           String?
  summary         String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime
  Routine         Routine[]
  ExercisesOnUser ExercisesOnUser[]    @relation("ExerciseToExercisesOnUser")
}

model ExercisesOnUser {
  id         String     @id
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  exerciseId String
  userId     String
  User       User       @relation(fields: [userId], references: [id])
  Exercise   Exercise[] @relation("ExerciseToExercisesOnUser")
}

model FileUploaded {
  id        String        @id
  createdAt DateTime      @default(now())
  updatedAt DateTime
  name      String
  key       String
  type      FileTypeEnum
  size      Int
  extension ExtensionEnum
  userId    String
  User      User[]        @relation("FileUploadedToUser")
}

model Professional {
  id                             String        @id
  addressId                      String        @unique
  phone                          String?
  profession                     String
  license                        String
  licenseState                   String
  licenseImage                   String?
  verifiedAt                     DateTime?
  presentation                   String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime
  userId                         String        @unique
  Appointment                    Appointment[]
  Evolution                      Evolution[]
  Address                        Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  User_Professional_userIdToUser User          @relation("Professional_userIdToUser", fields: [userId], references: [id])
  Request                        Request[]
  Routine                        Routine[]
  User_ProfessionalsToPatients   User[]        @relation("ProfessionalsToPatients")
}

model Request {
  id             String            @id
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  status         RequestStatusEnum @default(pending)
  professionalId String
  userId         String
  Professional   Professional      @relation(fields: [professionalId], references: [id])
  User           User              @relation(fields: [userId], references: [id])
}

model Routine {
  id             String                   @id
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime
  description    String
  frequency      Int
  frequencyType  RoutineFrequencyTypeEnum @default(day)
  repetitions    Int
  series         Int
  period         RoutinePeriodEnum        @default(morning)
  userId         String
  professionalId String
  exerciseId     String
  Activity       Activity[]
  Exercise       Exercise                 @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  Professional   Professional             @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  User           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                     String            @id
  name                                   String
  email                                  String            @unique
  password                               String?
  resetPasswordToken                     String?
  createdAt                              DateTime          @default(now())
  updatedAt                              DateTime
  image                                  String?
  imageFileId                            String?
  phone                                  String?
  roles                                  UserRoleEnum[]    @default([patient])
  height                                 Int?
  weight                                 Int?
  birthDate                              DateTime?
  accountVerifiedAt                      DateTime?
  accountVerifyToken                     String?
  Address                                Address?
  Appointment                            Appointment[]
  Evolution                              Evolution[]
  ExercisesOnUser                        ExercisesOnUser[]
  Professional_Professional_userIdToUser Professional?     @relation("Professional_userIdToUser")
  Request                                Request[]
  Routine                                Routine[]
  FileUploaded                           FileUploaded[]    @relation("FileUploadedToUser")
  Professional_ProfessionalsToPatients   Professional[]    @relation("ProfessionalsToPatients")
}

model Lead {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
}

enum AppointmentStatusEnum {
  scheduled
  canceled
  done
}

enum ExerciseCategoryEnum {
  legs
  arms
  back
  chest
  shoulders
  abs
  cardio
}

enum RequestStatusEnum {
  pending
  accepted
  rejected
}

enum RoutineFrequencyTypeEnum {
  day
  week
  month
}

enum RoutinePeriodEnum {
  morning
  afternoon
  night
}

enum UserRoleEnum {
  patient
  professional
  admin
}

enum ExtensionEnum {
  jpg
  jpeg
  png
  gif
  mp4
  pdf
  doc
  docx
  xls
  xlsx
  ppt
  pptx
  txt
  csv
  zip
  rar
  tar
  gz
}

enum FileTypeEnum {
  image
  video
  document
}
